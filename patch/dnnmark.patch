commit 2e9bb1b2420252d241823825613a8308956fa498
Author: Matt Sinclair <Matthew.Sinclair@amd.com>
Date:   Wed Mar 28 15:18:20 2018 -0400

    benchmarks: convert DNNMark from dGPU to APU format
    
    Change-Id: Iefeabc5731a006636d2bf4dc412550ec8153d5e1

diff --git a/core/include/data_manager.h b/core/include/data_manager.h
index 8b0c1394e..9ea0739e4 100644
--- a/core/include/data_manager.h
+++ b/core/include/data_manager.h
@@ -30,6 +30,9 @@
 #include "common.h"
 #include "data_png.h"
 
+// if set, then use discrete GPU memory management
+//#define DGPU
+
 namespace dnnmark {
 
 template <typename T>
@@ -42,21 +45,29 @@ class Data {
   Data(int size)
   : size_(size) {
     LOG(INFO) << "Create Data chunk of size " << size_;
+#ifdef DGPU
 #ifdef NVIDIA_CUDNN
     CUDA_CALL(cudaMalloc(&gpu_ptr_, size * sizeof(T)));
 #endif
 #ifdef AMD_MIOPEN
     HIP_CALL(hipMalloc(&gpu_ptr_, size * sizeof(T)));
 #endif
+#else // APU
+    gpu_ptr_ = (T *)malloc(size * sizeof(T));
+#endif // #ifdef DGPU
   }
   ~Data() {
     LOG(INFO) << "Free Data chunk of size " << size_;
+#ifdef DGPU
 #ifdef NVIDIA_CUDNN
     CUDA_CALL(cudaFree(gpu_ptr_));
 #endif
 #ifdef AMD_MIOPEN
     HIP_CALL(hipFree(gpu_ptr_));
 #endif
+#else // APU
+    free(gpu_ptr_);
+#endif // #ifdef DGPU
   }
   void Filler() {
     png_ = PseudoNumGenerator::GetInstance();
diff --git a/core/include/data_png.h b/core/include/data_png.h
index 584100ec0..665f74e70 100644
--- a/core/include/data_png.h
+++ b/core/include/data_png.h
@@ -62,6 +62,7 @@ class PseudoNumGenerator {
     return instance_.get();
   }
   void GenerateUniformData(float *dev_ptr, int size) {
+#ifdef DGPU
 #ifdef NVIDIA_CUDNN
     CURAND_CALL(curandGenerateUniform(gen_, dev_ptr, size));
 #endif
@@ -75,8 +76,14 @@ class PseudoNumGenerator {
     delete []host_ptr;
     
 #endif
+#else // APU
+    for (int i = 0; i < size; i++)
+      dev_ptr[i] = static_cast <float> (rand()) /
+                    (static_cast <float> (RAND_MAX/seed));
+#endif // #ifdef DGPU
   }
   void GenerateUniformData(double *dev_ptr, int size) {
+#ifdef DGPU
 #ifdef NVIDIA_CUDNN
     CURAND_CALL(curandGenerateUniformDouble(gen_, dev_ptr, size));
 #endif
@@ -89,7 +96,12 @@ class PseudoNumGenerator {
                        hipMemcpyHostToDevice));
     delete []host_ptr;
 #endif
-  }  
+#else // APU
+    for (int i = 0; i < size; i++)
+      dev_ptr[i] = static_cast <double> (rand()) /
+                    (static_cast <double> (RAND_MAX/seed));
+#endif // #ifdef DGPU
+  }
 };
 
 std::unique_ptr<PseudoNumGenerator> PseudoNumGenerator::instance_ = nullptr;
